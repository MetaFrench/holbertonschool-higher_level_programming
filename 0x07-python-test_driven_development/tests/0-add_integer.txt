============================================
            Test 0 - add_integer
============================================


Using 0-add_integer.py
---------------------

This is an example text file in reStructuredText format. First import
``add_integer`` from the ``0-add_integer`` task:

    >>> add_integer = __import__("0-add_integer").add_integer

test from main 2:
    >>> add_integer(100, -2)
    98

test from main 3:
    >>> add_integer(2)
    100

test from main 4:
    >>> add_integer(100.3, -2)
    98

test from main 5:
    >>> add_integer(4, "School")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

test from main 6:
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

unique test 1:
    >>> add_integer(2, 3, 4)
    Traceback (most recent call last):
    ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

unique test 2:
    >>> add_integer("", "")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

unique test 4:
    >>> add_integer(1, int("Hi"))
    Traceback (most recent call last):
    ...
    ValueError: invalid literal for int() with base 10: 'Hi'

unique test 6:
    >>> add_integer(float('inf'), 2)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

unique test 7:
    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

unique test 8:
    >>> add_integer(10, 0.98869039757839208585782092847592)
    10

unique test 9:
    >>> add_integer(None, 2)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

>>> add_integer(True, 5)
6
